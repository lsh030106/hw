두 프로세스 간의 통신 세션에서 통신을 초기화(다른 프로세스와 세션을 시작하려고 접촉을 초기화) 하는 프로세스를 클라이언트라고 한다. 세션을 시작하기 위해 접속을 기다리는 프로세스를 서버라고 한다
소켓은 host의 application layer와 transport layer 간의 interface, application programming interface(API) 라고 도 불린다
개발자는 소켓의 application layer에 대한 모든 통제권을 갖지만 소켓의 transport layer에 대한 통제권은 거의 갖지 못한다.

transport layer 에 대한 애플리케이 개발자의 통제는 
1. 전송 프로토콜의 선택
2. 최대 버퍼와 최대 세그먼트 크기와 같은 약간의 transport layer의 매개변수의 설정

-> 나머지는 당연히 OS에서 제어한다


애플리케이션 계층 프로토콜과 네트워크 계층 프로토콜을 구분하는 것은 중요
애플리케이션 계층 프로토콜은 네트워크 계층 프로토콜의 한 요소일 뿐이다


소켓이 애플리케이션 프로세스와 전송 프로토콜 간의 인터페이스라는 것을 기억하자

네트워크 애플리케이션이 전송 프로토콜로 부터 어떠한 서비스를 요구하는지 세가지 차원에서 분류 해보자

1. 데이터 손실 (신뢰적인 데이터 전송)
전자메일, 파일 전송, 웹문서 전송 같은 애플리케이션은 최대의 신뢰적인 데이터 전송(데이터 손실이 없는 전송)을 요구
실시간 오디오/비디오, 같은 멀티 미디어 애플리케이션은 어느정도 손실을 허용하는 
-> 손실허용 애플리케이션 (loss-tolerant application)

2. 대역폭 (bandwidth)

대역폭에 민감한 애플리케이션(bandwidth sensitive application), 전화같은 것들을 32kbps 로 인코딩 한다면 이 전송률로 데이터를 네트워크로 보내고 수신 애플리케이션으로 전달해야한다.
은근 대역폭에 민감한 애플리케이션이 많다.

융통성 있는 애플리케이션(elastic application) 인 파일전송, 전자 메일도 있지만 대역폭은 많으면 많을 수록 좋다

3. 시간

시간도 굉장히 중요하다. 전화, 원격회의, 게임 같이 상호작용이 중효한 실시간 애플리케이션들은 효과적인 데이터 전송을 위해 엄격하게 시간 조건을 요구한다

그럼 이걸 지키려면 얼마나 많은 전송 프로토콜이 존재하는 걸까

일반적으로 단 두개 TCP와 UDP 가 존재한다

개발자들은 인터넷 애플리케이션을 만들 때 첫 번째 결정 중 하나가 UDP, TCP 중 하나를 선택햐야한다

TCP 서비스

애플리케이션이 TCP 전송 프로토콜을 사용한다면 두 가지 서비스를 받는다

1. connection oriented service 
첫 애플리케이션 메시지를 전송하기 전 TCP는 클라이언트와 서버가 서로 전송 제어 정보(Transfer control) 를 교환한다
-> handshake
클라이언트와 서버에게 패킷이 곧 도달하니 준비하라고 알려준다고 보면 된다

핸드셰이킹 과정이 끝나면 TCP 연결이 두 프로세스의 소켓 사이에 존재한다고 얘기한다(Process to process)

서로에게 동시에 메시지를 보낼 수 있기에 full-duplex 연결이라고 한다

2. 신뢰적 전송 서비스
통신 프로세스는 모든 데이터를 오류 없이 올바른 순서로 전달하기 위하여 TCP에 의존한다.
TCP는 애플리케이션 한쪽이 소켓에 바이트 스트림을 전달하면 그 데이터 스트림을 수신 소켓으로 손실되지 않고 중복되지 않게 전달한다

TCP 가 제공하지 않는 서비스

1. 최소 전송률을 보장하지 않는다
특히 송신 프로세스는 원하는 만큼의 전송률로 전송하는 것이 허용되지 않는다(송신자가 낮은 평균 전송률로 보내도록 제약하는 TCP congestion control 로 제어된다)

2. TCP는 어떠한 지연 보장도 제공하지 않는다

TCP는 모든 데이터의 전달을 보장하지만 전송률이나 전달에 걸리는 지연은 보장하지 않는다.


UDP 서비스 

비연결형 이므로 핸드셰이킹 X 
비신뢰적인 데이터 전송 서비서를 제공한다.
수신 소켓에 도착하는 것을 보장하지 않는다, 수신 소켓에 도착하는 메시지의 순서가 뒤바뀔수 도 있다

congestion control를 포함하지 않아 송신 프로세스는 자기가 원하는 만큼 맘대로 데이터를 UDP 소켓에 뿌릴수 있다
수신 소켓에 전부 도달할 수 없을지라도 그건 UDP 에겐 알 바 아니다
일부 손실은 감안해야 UDP 를 사용할수 있다
-> 근데 또 TCP 처럼 지연에 대한 보장은 제공안한다


transport layer -> process logical communication (종단 시스템에서 동작)

network layer -> host logical communication

논리적 통신, 직접 연결된 것처럼 

전송 계층은 하위 네트워크 계층 프로토콜의 서비스 모델에 제약을 받는다.

네트워크 계층 프로토콜이 호스트 간 전송되는 트랜스포트 계층 세그먼트에 대한 지연 보장이나 대역폭 보장을 제공할 수 없다면 , 트랜스포트 계층 프로토콜은 프로세스끼리 전송하는 메시지에 대한 지연보장이나 대역폭 보장을 제공할 수 없다

용어는 다 다르나 이 책에선 TCP/UDP 트랜스포트 계층 패킷을 세그먼트(segment) 라고 하며 네트워크 계층 패킷을 데이터그램(datagram) 이라고 한다

IP 는 인터넷 프로토콜이며 호스트간 논리적 통신을 제공하는 
best-effort delivery service 다. 이는 IP가 통신하는 호스트 간 세그먼트를 전달하기 위해 최대한 노력할 뿐
그 어떠한 보장도 하지않는다는걸 이름에서 증명한다.

IP는 세그먼트의 전달을 보장하지 않고 세그먼트가 순서대로 전달되는 것을 보장하지 않는다. IP는 비신뢰적인 서비스다

UDP와 TCP의 가장 기본적인 기능은 end system 간의 IP 전달 서비스를 end system에서 동작하는 두 프로세스간의 전달 서비스로 확장 하는 것이다

호스트 대 호스트 전달을 프로세스 대 프로세스 전달로 확장하는 것을 트랜스포트 계층 다중화(transport layer multiplexing), 역 다중화 (demultiplexing) 라고 한다 


UDP 와 TCP는 헤더에 오류검출 필드를 포함해 무결성 검사를 제공한다
이 최소한의 두가지 트랜스포트 계층 서비스는 UDP에서 제공하는 유일한 두 가지 서비스다 
UDP 또한 IP 처럼 비신뢰적인 서비스다. UDP는 하나의 프로세스에서 전송된 데이터가 손상되지 않고 목적이 프로세스에 도착한다는 것을 보장하지 않는다.


TCP 는 application 에게 몇 가지 부가 서비스를 제공한다

1. reliable data transfer(신뢰적인 데이터 전달) dmf wprhdgksek

흐름제어, 순서번호, 확인응답, 타이머 를 사용함으로 TCP는 송신하는 프로세스로부터 수신하는 프로세스에게 데이터가 순서대로 정확하게 전달된다는 것을 확신한다

이처럼 TCP는 비신뢰적인 종단간의 IP 서비스를 프로세스 사이의 신뢰적인 데이터 전송 서비스로 만들어 준다

2. congestion control(혼잡 제어) 
혼잡제어는 인터넷 전반에 대한 서비스, 일반 목적이 아닌 요청하는 애플리케이션에게 제공되는 서비스
하나의 TCP 연결이 과도한 양의 트래픽 때문에 통신하는 호스트들 사이의 스위치와 링크가 폭주되는 것을 TCP 혼잡제어가 방지하는 것.

원칙적으로 TCP는 혼잡한 네트워크 링크에서 TCP 연결이 링크의 대역폭을 공평하게 공유하여 통과하도록 한다. 
이것은 송신측의 TCP가 네트워크에 보낼 수 있는 트래픽을 조절함으로 수행된다

UDP는 트래픽이 조절되지 않는다. UDP를 사용하는 애플리케이션은 주어진 시간에 허용되는 속도로 전송할 수 있다


transport layer multiplexing and demultiplexing

network layer 에서 제공하는 host to host transfer service 에서 host에서 동작하는 application 에 대한 process to process transfer service 로 확장하는 것.

destination host 에서의 transport 계층은 단지 하위 network layer로 부터 segment를 수신한다

-> transport layer는 host에서 동작하는 하위 application process 에게 segment의 데이터를 전달하는 의무를 갖는다 

process 는 socket을 가지고 있다. 소켓은 stream의 일종으로 process 와 trasport layer의 문이라고 생각하면 된다
소켓은 network 에서 process 로 데이터를 전달, process 에서 network로 데이터를 전달하는 출입구의 역할

즉 수신측 호스트의 transport layer는 실제로 데이터를 직접 프로세스로 전달하지 않는다.
-> 중간 매개자인 소켓에게 전달한다

어떤 주어진 시간에 수신측 호스트에 하나 이상의 소켓이 있을 수 있으므로, 각각의 소켓은 유일한 식별자를 갖는다
-> 이 식별자의 포맷은 소켓이 UDP인지 TCP 소켓인지에 따라 달라진다.

각각 transport layer segment 들은 적절한 소켓으로 향하기 위해 필드 집합을 갖는다
수신측의 transport layer는 수신 소켓을 식별하기 위해 이들 필드를 검사한다. 그리고 세그먼트를 해당 소켓으로 보낸다
-> transport segment의 데이터를 올바른 소켓으로 전달하는 작업을 역다중화라 한다.(demultiplexing)

source host에서 소켓들로부터 데이터를 모으고, 세그먼트를 생성하기 위해 각 데이터를 header 정보로 캡슐화하고, 그 세그먼트를 네트워크 계층으로 보내는 작업을
-> multiplexing 이라고 한다

여러 목적지를 가진 세그먼트를 각각 목적지에 맞는 소켓에 뿌림 -> demultiplexing
여러 출발지의 소켓들로부터 정보를 받아 세그먼트를 생성해 목적지에 전송 -> multiplexing


transport layer multiplexing 은 두 가지 요구사항을 갖고 있음
1. 소켓은 유일한 식별자를 갖는다
2. 각 세그먼트는 세그먼트가 전달될 적절한 소켓을 가리키는 특별한 필드를 갖는다

1번은 뭐 당연하고 2번에서 말하는 특별한 필드는 source 포트 번호 필드와 destination 포트 번호 필드이다( UDP와 TCP 세그먼트는 다른 여러 필드 값을 가진다

포트번호가 나온다. 포트번호는 굉장히 익숙하며 16bit 정수 즉 0~65535 까지 사용가능 하며 0뷰토 1023까지는 잘알려진 포트번호라고 하여  사용을 엄격하게 제한한다. 사용이 예약되어 있다는 뜻이다

transport layer demultiplexing 

1. host의 각 socket 은 포트번호를 할당받는다
2. 세그먼트가 호스트에 도착하면,  트랜스포트 계층은 세그먼트 안의 목적지 포트 번호를 검사한다
3. 검사한 내용을 바탕으로 해당 소켓으로 세그먼트를 보낸다
4. 세그먼트의 데이터는 소켓을 통해 해당되는 프로세스로 전달된다

생각보다 간단하다고 생각할 수 있지만 당연하다 TCP의 다중화/역다중화는 의미가 좀더 다르다
위의 단계는 UDP의 기본적인 동작 방식이다


connectionless multiflexing and demultiflexing

우리가 소켓프로그래밍을 할때 서버측의 포트번호를 할당해 주었지만 클라이언트는 할당해 주지않았다
보통 클라이언트의 포트번호는 트랜스포트 계층에서 자동으로 하나 할당해준다

예를 들겠다

UDP 소켓 19000을 가진 호스트 A의 프로세스가 UDP 소켓 20000을 가진 호스트 B의 프로세스에 에플리케이션 데이터 전송을 원한다

호스트 A의 트랜스포트 계층은 에플리케이션 데이터, 근원지 포트번호(19000), 목적지 포트번호(20000) 그리고 두개의 다른값을 포함하는 트랜스포트 계층 세그먼트를 생성한다. 트랜스 포트 계층은 만들어진 세그먼트를 네트워크 계층으로 전달한다.

네트워크 계층은 세그먼트를 IP Datagram으로 캡슐화하고 최선형(best-effort)으로 세그먼트를 수신 호스트로 전달한다.
host B는 네트워크로부터 UDP 세그먼트들이 도착하면 세그먼트의 목적지 포트를 검사해 세그먼트를 각자 적절한 소켓으로 보낸다

여기서 UDP 소켓은 목적지 IP 주소와 목적지 포트번호로 구성된 집합에 의해서 식별이 된다는걸 느꼈나


근데 그럼 근원지 IP 주소와 근원진 포트번호는 대체 어디에 쓰는지도 궁금하다
근원지 IP 주소와 근원지 포트번호가 다르더라도 목적지 주소와 번호만 같으면 도착을 할게 분명한데

이 주소들은 복귀 주소의 한부분으로 사용된다
B가 A에게 답신을 보내고 싶을 때 B에서 A로 가는 세그먼트의 목적지 포트번호는 A로부터 왔던 세그먼트의 근원지 포트 번호로부터 가져온다



connect-oriented multiflexing and demultiflexing

TCP와 UDP 소켓의 다른점은 TCP 소켓은 4개의 튜플(근원지 IP 주소, 근원지 포트번호, 목적지 IP 주소, 목적지 포트번호) 로 된 집합에 의해서 식별이 된다는 것. 
UDP 와 다른점이 없지 않냐 생각할 수 있겠지만 UDP는 일단 호스트에 세그먼트가 도착하면 목적지 포트번호만 사용한다

UDP는 이미 도착한 마당에 IP고 근원지고 IP고 필요없다

TCP 세그먼트가 host에 도착하면 세그먼트를 다중화 하기 위해 네 개 값 모두를 사용한다

* 따라서 동일한 근원지 포트번호를 가진 클라이언트라도 다른 근원지 IP 주소를 가지게 되므로 서버는 같은 근원지 포트번호를 가진 두 연결을 올바르게 demultiplexing 할수 있다

UDP

UDP 를 쓰든 TCP 를 쓰든 transport layer 는 application level process 와 network layer 간의 데이터를 넘겨 주기 위해 multiplexing 과 demultiplexing 서비스를 제공해야한다

UDP는 다중화/역다중화 기능과 간단한 오류 검사 기능을 제외하면 IP에 아무것도 추가하지 않는다
전송 프로토콜로 UDP를 선택한다면 실상 애플리케이션은 IP와 직접 통신하는 것

UDP는 애플리케이션 메시지를 받아 역다중화를 통해 목적지 포트와 근원지 포트를 필드에 적고 나머지 두필드를 추가한 다음 최종 세그먼트를 네트워크 계층에 넘겨준다.
네트워크 계층은 세그먼트를 IP 데이터그램으로 캡슐화하고 세그먼트를 수신 호스트에게 best-effort 서비스로 전달한다

UDP 세그먼트 구조

UDP header 는 2바이트씩 구성된 4개의 필드를 갖는다

포트 번호는 목적지 호스트가 목적지 종단 시스템에서 동작하는 정확한 프로세스에게 애플리케이션 데이터를 넘기게 해준다

검사합(checksum) 은 세그먼트에 오류가 발생했는지를 검사하기 위해 수신 호스트에 의해서 사용된다.

길이 필드는 헤더를 포합하는 UDP 세그먼트의 길이(바이트 단위)를 나타낸다

UDP 검사합

오류 검출을 제공한다, 즉 검사합은 세그먼트가 근원지로부터 목적지로 이동했을 때
UDP 세그먼트 안의 비트에 대한 변경사항이 있는지 검사하는 것이다.
송신측에서 UDP 세그먼트 안에 있는 모든 16비트 워드 합을 가지고 1의 보수를 수행하며, 덧셈 과정에서 발생하는
오버 플로는 버린다

이 결과가 바로 UDP 세그먼트의 검사합 필드에 삽입된다.

UDP 세그먼트의 3개의 16비트 워드를 모두 더한 다음 1의 보수를 구한다

만약 패킷에 어떤 오류도 있지 않다면 수신자가 검사합을 포함에 나머지 3개의 16비트 워드를 더했을때 합은 16비트 모두 1로 set 되어있을 것. 하나라도 0이 있다면 오류가 발생했음 을 알수 있다

많은 링크 계층 프로토콜이  오류 검사를 제공하지만 UDP 또한 제공하는 이유는 근원지와 목적지 사이의 모든 링크가 오류 검사를 제공한다는 보장이 없기 때문.
세그먼트들이 정확하게 링크를 통해 전송되었더라도 세그먼트가 라우터의 메모리에 저장될때 비트 오류가 들어오는 것이 가능하다

종단 간의 데이터 전송 서비스가 오류 검출을 제공한다면 트랜스포트 계층에서 오류 검출을 제공해야 되는 것이다
이게 종단 간 원리(end-end principle) 의 예





 
